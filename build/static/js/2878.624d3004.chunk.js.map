{"version":3,"file":"static/js/2878.624d3004.chunk.js","mappings":"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","sources":["components/Lineup/LineupCard.js"],"sourcesContent":["import React, { useCallback, useState, useEffect, lazy, Suspense } from 'react';\r\nimport {\r\n  FormControl,\r\n  Grid,\r\n  TextField,\r\n  Card,\r\n  InputLabel,\r\n  CardContent,\r\n  Select,\r\n  MenuItem,\r\n  createFilterOptions,\r\n  Modal,\r\n} from '@mui/material';\r\nconst Lyrics = lazy(() => import('../Modals/Lyrics'));\r\nconst Chords = lazy(() => import('../Modals/Chords'));\r\n\r\nconst filter = createFilterOptions();\r\n\r\nconst initialState = {\r\n  song_title: null,\r\n  artist: null,\r\n  album: null,\r\n  lyrics: null,\r\n  chords: null,\r\n  media: null,\r\n  from: null,\r\n  song_id: null,\r\n  is_new: false,\r\n};\r\n\r\nconst LineupCard = ({ category, setLineupData, songs, songData, saving }) => {\r\n  const [cardData, setCardData] = useState(songData || initialState);\r\n\r\n  const [newSong, setNewSong] = useState(false);\r\n  const [open, setOpen] = useState({ modal: null, status: false });\r\n  const [filteredSongs, setFilteredSongs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setCardData(initialState);\r\n  }, [newSong]);\r\n\r\n  // useEffect(() => {\r\n  // \tconsole.log({songData, label: category.label})\r\n  // \t// setCardData(songData ? songData : initialState)\r\n  // }, [songData])\r\n\r\n  const handleFilterSongs = useCallback(() => {\r\n    if (songs?.length > 0 && category.id) {\r\n      const filtered = songs?.filter(\r\n        (song) => song?.tags?.length > 0 && song?.tags[0] === category?.tags[0]\r\n      );\r\n      setFilteredSongs(filtered);\r\n    }\r\n  }, [songs]);\r\n\r\n  useEffect(() => {\r\n    handleFilterSongs();\r\n  }, [songs, handleFilterSongs]);\r\n\r\n  const handleSetLineup = useCallback(() => {\r\n    setLineupData((lineupdata) => {\r\n      console.log({ lineupdata, category });\r\n      return lineupdata.map((song) => {\r\n        if (song.label === category.label) {\r\n          return cardData.title\r\n            ? {\r\n                ...song,\r\n                ...cardData,\r\n                is_new: newSong,\r\n              }\r\n            : category;\r\n        }\r\n\r\n        return song;\r\n      });\r\n    });\r\n  }, [cardData, category]);\r\n\r\n  useEffect(() => {\r\n    if (cardData.title) {\r\n      console.log({ songData, cardData });\r\n      handleSetLineup();\r\n    }\r\n  }, [cardData, newSong]);\r\n\r\n  const handleUpdateCard = useCallback(\r\n    (value) => {\r\n      console.log({ value });\r\n      setLineupData((lineupdata) => {\r\n        console.log({ lineupdata });\r\n        return lineupdata.map((song) => {\r\n          console.log({ song, category });\r\n          if (song.id === category.id) {\r\n            return {\r\n              ...song,\r\n              ...value,\r\n            };\r\n          }\r\n\r\n          return song;\r\n        });\r\n      });\r\n      // setCardData(value);\r\n    },\r\n    [category]\r\n  );\r\n\r\n  return (\r\n    <Grid item xs={12} md={12}>\r\n      <Modal\r\n        open={open.status}\r\n        onClose={() => setOpen({ modal: null, status: false })}\r\n      >\r\n        {open.modal === 'lyrics' ? (\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <Lyrics\r\n              setCardData={setCardData}\r\n              setOpen={setOpen}\r\n              cardData={songData || cardData}\r\n              category={category}\r\n            />\r\n          </Suspense>\r\n        ) : (\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <Chords\r\n              setCardData={setCardData}\r\n              setOpen={setOpen}\r\n              cardData={songData || cardData}\r\n              category={category}\r\n            />\r\n          </Suspense>\r\n        )}\r\n      </Modal>\r\n\r\n      <Card sx={{ mb: 2 }}>\r\n        <CardContent>\r\n          {/* <div>\r\n            <FormGroup className='inline-block'>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={newSong}\r\n                    onChange={() => setNewSong(!newSong)}\r\n                  />\r\n                }\r\n                label='New'\r\n              />\r\n            </FormGroup>\r\n          </div> */}\r\n\r\n          {newSong ? (\r\n            <TextField\r\n              label={category.label}\r\n              fullWidth\r\n              size=\"small\"\r\n              variant=\"standard\"\r\n              value={cardData.title || cardData.song_title}\r\n              disabled={saving}\r\n              onChange={(e) =>\r\n                setCardData({ ...cardData, title: e.target.value })\r\n              }\r\n            />\r\n          ) : (\r\n            <FormControl variant=\"standard\" fullWidth>\r\n              {/* {console.log({\"@Select:\": cardData})} */}\r\n              <InputLabel>{category.label}</InputLabel>\r\n              <Select\r\n                value={songData?.id || cardData.id}\r\n                onChange={(e) =>\r\n                  setCardData({\r\n                    ...songs?.filter((s) => s.id === e.target.value)[0],\r\n                  })\r\n                }\r\n              >\r\n                {filteredSongs.map((song) => {\r\n                  return (\r\n                    <MenuItem key={song.id} value={song.id}>\r\n                      {song.title}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n          )}\r\n\r\n          {/* <Grid\r\n            container\r\n            sx={{ mt: 1, width: '100%' }}\r\n            spacing={1}\r\n            justifyContent='left'\r\n          >\r\n            <Grid item xs={6} md={6}>\r\n              <TextField\r\n                label='Artist'\r\n                fullWidth\r\n                size='small'\r\n                variant='standard'\r\n                value={cardData?.artist || songData?.artist}\r\n                disabled={saving}\r\n                onChange={(e) =>\r\n                  setCardData({ ...cardData, artist: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} md={6}>\r\n              <TextField\r\n                label='Album'\r\n                fullWidth\r\n                size='small'\r\n                variant='standard'\r\n                value={cardData?.album || songData?.album}\r\n                disabled={saving}\r\n                onChange={(e) =>\r\n                  setCardData({ ...cardData, album: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid> */}\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default React.memo(LineupCard);\r\n"],"names":["Lyrics","lazy","Chords","initialState","createFilterOptions","song_title","artist","album","lyrics","chords","media","from","song_id","is_new","LineupCard","category","setLineupData","songs","songData","saving","useState","cardData","setCardData","newSong","modal","status","open","setOpen","filteredSongs","setFilteredSongs","useEffect","handleFilterSongs","useCallback","length","id","filtered","filter","song","tags","handleSetLineup","lineupdata","console","log","map","label","title","value","item","xs","md","onClose","Suspense","fallback","sx","mb","fullWidth","size","variant","disabled","onChange","e","target","s","React"],"sourceRoot":""}