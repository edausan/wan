{"version":3,"file":"static/js/3135.c68e81c7.chunk.js","mappings":"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","sources":["components/Pages/User/WritePost.js","hooks/useResize.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { AddPhotoAlternateTwoTone, Clear, Send } from '@mui/icons-material';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardMedia,\r\n  CircularProgress,\r\n  Dialog,\r\n  IconButton,\r\n  TextField,\r\n} from '@mui/material';\r\nimport { getAuth } from 'firebase/auth';\r\nimport moment from 'moment';\r\nimport React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { FirebaseApp } from '../../../Firebase';\r\nimport { CreatePost } from '../../../Firebase/postsApi';\r\nimport useResize from '../../../hooks/useResize';\r\n\r\nconst CLOUDINARY_API = 'https://api.cloudinary.com/v1_1/edausan15';\r\nconst CLOUDINARY_UPLOAD_PRESET = 'uploads';\r\n\r\nconst WritePost = () => {\r\n  const auth = getAuth(FirebaseApp);\r\n  const user = auth.currentUser;\r\n  // const reader = new FileReader();\r\n  const [imageUpload, setImageUpload] = useState(null);\r\n  const [message, setMessage] = useState(null);\r\n  const [photoURL, setPhotoURL] = useState(null);\r\n  // const [success, setSuccess] = useState(false);\r\n  const [uploading, setUploading] = useState(false);\r\n  const { resized, processfile } = useResize({ quality: 0.9 });\r\n  const [uploadingMedia, setUploadingMedia] = useState(false);\r\n  const [media, setMedia] = useState({ secure_url: null });\r\n\r\n  useEffect(() => {\r\n    console.log({ resized });\r\n    setMedia({ secure_url: resized });\r\n  }, [resized]);\r\n\r\n  const handleDeleteFromCloud = async () => {\r\n    setPhotoURL(null);\r\n    setImageUpload(null);\r\n    setMedia({ secure_url: null });\r\n  };\r\n\r\n  const handleUploadToCloud = async () => {\r\n    setUploadingMedia(true);\r\n\r\n    console.log({ imageUpload });\r\n    const form = new FormData();\r\n\r\n    try {\r\n      form.append('file', imageUpload);\r\n      form.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\r\n\r\n      const is_video = imageUpload?.type.includes('video');\r\n      // const url = `${CLOUDINARY_API}`;\r\n      const url = `${CLOUDINARY_API}/${is_video ? 'video' : 'image'}/upload`;\r\n      console.log(url, form.file);\r\n      const res = await fetch(url, {\r\n        method: 'POST',\r\n        body: form,\r\n        mode: 'cors',\r\n        // headers: {\r\n        //   'Content-Type': 'application/x-www-form-urlencoded',\r\n        //   'Access-Control-Allow-Origin': '*',\r\n        //   'Access-Control-Allow-Headers': 'Origin',\r\n        //   'Access-Control-Allow-Credentials': true,\r\n        // },\r\n      }).then((r) => r.json());\r\n\r\n      if (res) {\r\n        console.log({ handleUploadToCloud: res });\r\n        setPhotoURL(res);\r\n        setUploadingMedia(false);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log({ imageUpload });\r\n    imageUpload &&\r\n      imageUpload.type.includes('image') &&\r\n      processfile(imageUpload);\r\n  }, [imageUpload]);\r\n\r\n  useEffect(() => {\r\n    photoURL && handlePost();\r\n  }, [photoURL]);\r\n\r\n  const handlePost = async () => {\r\n    setUploading(true);\r\n    try {\r\n      const post = {\r\n        uid: user.uid,\r\n        message,\r\n        media: photoURL.secure_url,\r\n        date_created: moment().format('LLLL'),\r\n        reactions: [],\r\n        comments: [],\r\n        media_type: imageUpload.type,\r\n      };\r\n      const res = await CreatePost({ post });\r\n      console.log({ id: res.id });\r\n\r\n      if (res?.id) {\r\n        // setSuccess(true);\r\n        setTimeout(() => {\r\n          setMedia({ secure_url: null });\r\n          setMessage(null);\r\n          setImageUpload(null);\r\n          setPhotoURL(null);\r\n          setUploading(false);\r\n          // history.push(`/profile/${user.uid}`);\r\n        }, 500);\r\n        // setSuccess(false);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  const displayImage = (e) => {\r\n    const file = e.target.files[0];\r\n    console.log({ file });\r\n    if (file && file.size < 50000000) {\r\n      setImageUpload(file);\r\n\r\n      if (file.type.includes('video')) {\r\n        const vid = URL.createObjectURL(file);\r\n        setMedia({ secure_url: vid });\r\n      }\r\n    } else {\r\n      alert('File is too large.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={uploadingMedia}>\r\n        <div className='flex flex-col items-center p-4'>\r\n          <CircularProgress />\r\n          <span className='animate-pulse text-xs mt-2'>Uploading Media</span>\r\n        </div>\r\n      </Dialog>\r\n      <Card className='mb-4 relative'>\r\n        {media.secure_url && (\r\n          <IconButton\r\n            className='absolute z-[1003] top-[16px] right-[16px] bg-gray-800 hover:bg-gray-700'\r\n            onClick={handleDeleteFromCloud}\r\n          >\r\n            <Clear />\r\n          </IconButton>\r\n        )}\r\n        {media.secure_url && (\r\n          <CardMedia\r\n            component={imageUpload?.type.includes('image') ? 'img' : 'video'}\r\n            image={media.secure_url}\r\n            id='preview'\r\n            autoPlay\r\n            controls\r\n          />\r\n        )}\r\n        {/* <CardMedia component='img' src={img} /> */}\r\n        <CardContent sx={{ pb: 0 }}>\r\n          {/* <div id='preview'></div> */}\r\n          {uploading ? (\r\n            <div>{message}</div>\r\n          ) : (\r\n            <TextField\r\n              fullWidth\r\n              variant='standard'\r\n              placeholder={`How's your day? Share it with us.`}\r\n              multiline\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              disabled={uploading}\r\n              value={message}\r\n            />\r\n          )}\r\n        </CardContent>\r\n        <CardActions className='justify-end'>\r\n          <label htmlFor='icon-button-file'>\r\n            <Button\r\n              component='label'\r\n              aria-label='upload picture'\r\n              disabled={uploading}\r\n              startIcon={<AddPhotoAlternateTwoTone color='success' />}\r\n            >\r\n              <input\r\n                hidden\r\n                accept='image/*,video/*'\r\n                type='file'\r\n                onChange={displayImage}\r\n              />\r\n              <span className='!capitalize text-sm text-white/60'>\r\n                Photo/Video\r\n              </span>\r\n            </Button>\r\n          </label>\r\n          <Button\r\n            startIcon={<Send />}\r\n            onClick={media ? handleUploadToCloud : () => {}}\r\n            disabled={uploading || !message || !media}\r\n          >\r\n            <span className='!capitalize text-sm text-white/60'>Share</span>\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WritePost;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useResize = ({ quality = 1 }) => {\r\n  const max_width = 620;\r\n  const max_height = 620;\r\n  const [resized, setResized] = useState(null);\r\n\r\n  // useEffect(() => {\r\n  //   console.log({ file });\r\n  //   file?.type && processfile();\r\n  // }, [file]);\r\n\r\n  const processfile = (file) => {\r\n    console.log('processfile');\r\n    if (!/image/i.test(file?.type)) {\r\n      alert('File ' + file?.name + ' is not an image.');\r\n      return false;\r\n    }\r\n\r\n    // read the files\r\n    var reader = new FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n\r\n    reader.onload = function (event) {\r\n      // blob stuff\r\n      var blob = new Blob([event.target.result]); // create blob...\r\n      window.URL = window.URL || window.webkitURL;\r\n      var blobURL = window.URL.createObjectURL(blob); // and get it's URL\r\n\r\n      // helper Image object\r\n      var image = new Image();\r\n      image.src = blobURL;\r\n      console.log({ blobURL });\r\n      //preview.appendChild(image); // preview commented out, I am using the canvas instead\r\n      image.onload = function () {\r\n        // have to wait till it's loaded\r\n        var resized = resizeMe(image); // send it to canvas\r\n        console.log({ resized });\r\n        setResized(resized);\r\n      };\r\n    };\r\n  };\r\n\r\n  const resizeMe = (img) => {\r\n    var canvas = document.createElement('canvas');\r\n\r\n    var width = img.width;\r\n    var height = img.height;\r\n\r\n    // calculate the width and height, constraining the proportions\r\n    if (width > height) {\r\n      if (width > max_width) {\r\n        //height *= max_width / width;\r\n        height = Math.round((height *= max_width / width));\r\n        width = max_width;\r\n      }\r\n    } else {\r\n      if (height > max_height) {\r\n        //width *= max_height / height;\r\n        width = Math.round((width *= max_height / height));\r\n        height = max_height;\r\n      }\r\n    }\r\n\r\n    // resize the canvas and draw the image data into it\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.drawImage(img, 0, 0, width, height);\r\n\r\n    return canvas.toDataURL('image/webp', quality); // get the data from canvas as 70% JPG (can be also PNG, etc.)\r\n  };\r\n\r\n  return { resized, processfile, resizeMe };\r\n};\r\n\r\nuseResize.protoTypes = {\r\n  quality: PropTypes.number,\r\n};\r\n\r\nexport default useResize;\r\n"],"names":["user","getAuth","FirebaseApp","currentUser","useState","imageUpload","setImageUpload","message","setMessage","photoURL","setPhotoURL","uploading","setUploading","useResize","quality","resized","processfile","uploadingMedia","setUploadingMedia","secure_url","media","setMedia","useEffect","console","log","handleDeleteFromCloud","handleUploadToCloud","form","FormData","append","is_video","type","includes","url","file","fetch","method","body","mode","then","r","json","res","handlePost","post","uid","date_created","moment","format","reactions","comments","media_type","CreatePost","id","setTimeout","open","className","onClick","component","image","autoPlay","controls","sx","pb","fullWidth","variant","placeholder","multiline","onChange","e","target","value","disabled","htmlFor","startIcon","color","hidden","accept","files","size","vid","URL","createObjectURL","alert","setResized","resizeMe","img","canvas","document","createElement","width","height","Math","round","getContext","drawImage","toDataURL","test","name","reader","FileReader","readAsArrayBuffer","onload","event","blob","Blob","result","window","webkitURL","blobURL","Image","src","protoTypes","PropTypes"],"sourceRoot":""}