{"version":3,"file":"static/js/202.7c97a7d9.chunk.js","mappings":"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","sources":["components/Modals/Lyrics.js","../node_modules/@mui/material/CardActions/cardActionsClasses.js","../node_modules/@mui/material/CardActions/CardActions.js"],"sourcesContent":["import {\n  TextField,\n  Typography,\n  Card,\n  CardActions,\n  IconButton,\n  List,\n  ListItem,\n  Button,\n  Snackbar,\n  Alert,\n} from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { Add } from '@mui/icons-material';\nimport PopperUnstyled from '@mui/base/PopperUnstyled';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\nimport { UpdateLyrics } from '../../Firebase/songsApi';\n\nconst Lyrics = ({ setCardData, cardData, setOpen, category }) => {\n  const [lyrics, setLyrics] = useState({\n    verse: null,\n    pre_chorus: null,\n    chorus: null,\n  });\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [updating, setUpdating] = useState(false);\n  const [updated, setUpdated] = useState(false);\n\n  console.log({ Lyrics: cardData });\n\n  useEffect(() => {\n    if (cardData.lyrics?.verse) {\n      console.log(cardData.lyrics);\n      setLyrics(cardData.lyrics);\n    }\n  }, []);\n\n  useEffect(() => {\n    setCardData((cardData) => ({ ...cardData, lyrics }));\n  }, [lyrics]);\n\n  const isOpen = Boolean(anchorEl);\n  const id = isOpen ? 'about-popper' : undefined;\n\n  const handleSaveLyrics = async () => {\n    try {\n      setUpdating(true);\n      const res = await UpdateLyrics({ id: cardData.id, lyrics });\n      console.log({ res });\n      setUpdating(false);\n      setUpdated(true);\n\n      setTimeout(() => {\n        setUpdated(false);\n      }, 1000);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return (\n    <>\n      <Snackbar\n        open={updated}\n        autoHideDuration={1000}\n        // onClose={handleClose}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <Alert severity='success' sx={{ width: '100%' }}>\n          Lyrics Successfully Updated!\n        </Alert>\n      </Snackbar>\n      <Card\n        sx={{\n          width: '90%',\n          position: 'absolute',\n          top: '30%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          p: 2,\n          pb: 0,\n          boxSizing: 'border-box',\n          // minHeight: 500,\n        }}\n      >\n        <Typography variant='h6' sx={{ mb: 2 }}>\n          {cardData.title || category.label} <small>| Lyrics</small>\n        </Typography>\n\n        <TextField\n          label='Verse'\n          fullWidth\n          variant='standard'\n          multiline\n          value={lyrics.verse}\n          onChange={(e) => setLyrics({ ...lyrics, verse: e.target.value })}\n          sx={{ mb: 2 }}\n          maxRows={5}\n        />\n        <TextField\n          label='Pre-chorus'\n          fullWidth\n          variant='standard'\n          multiline\n          value={lyrics.pre_chorus}\n          sx={{ mb: 2 }}\n          maxRows={5}\n          onChange={(e) => setLyrics({ ...lyrics, pre_chorus: e.target.value })}\n        />\n        <TextField\n          label='Chorus'\n          fullWidth\n          variant='standard'\n          multiline\n          value={lyrics.chorus}\n          onChange={(e) => setLyrics({ ...lyrics, chorus: e.target.value })}\n          maxRows={5}\n        />\n\n        <CardActions className='mt-2 px-0 pb-4 justify-end'>\n          {cardData.id && !cardData.is_new ? (\n            <button\n              className='py-1 px-3 bg-green-600 text-white rounded-md'\n              onClick={handleSaveLyrics}\n              disabled={updating}\n            >\n              Save Lyrics\n            </button>\n          ) : (\n            <Button\n              size='small'\n              onClick={() =>\n                setOpen({ id: null, status: false, song_title: null })\n              }\n            >\n              Done\n            </Button>\n          )}\n        </CardActions>\n      </Card>\n    </>\n  );\n};\n\nexport default Lyrics;\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nconst cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"disableSpacing\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\n\nconst CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8\n}, !ownerState.disableSpacing && {\n  '& > :not(:first-of-type)': {\n    marginLeft: 8\n  }\n}));\nconst CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n\n  const {\n    disableSpacing = false,\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    disableSpacing\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardActions;"],"names":["setCardData","cardData","setOpen","category","useState","verse","pre_chorus","chorus","lyrics","setLyrics","anchorEl","updating","setUpdating","updated","setUpdated","console","log","Lyrics","useEffect","Boolean","handleSaveLyrics","UpdateLyrics","id","res","setTimeout","message","open","autoHideDuration","anchorOrigin","vertical","horizontal","severity","sx","width","position","top","left","transform","p","pb","boxSizing","variant","mb","title","label","fullWidth","multiline","value","onChange","e","target","maxRows","className","is_new","onClick","disabled","size","status","song_title","getCardActionsUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardActionsRoot","styled","name","overridesResolver","props","styles","ownerState","root","disableSpacing","spacing","_extends","display","alignItems","padding","marginLeft","React","inProps","ref","useThemeProps","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx"],"sourceRoot":""}