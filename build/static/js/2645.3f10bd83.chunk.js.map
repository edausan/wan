{"version":3,"file":"static/js/2645.3f10bd83.chunk.js","mappings":"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","sources":["components/Lineup/EditLineup.js","components/Lineup/AutocompleteSong.js","components/Lineup/LineupCard.js","Youtube.js","components/Video/VideoItem.js","components/Modals/Media.js","components/Lineup/NewLineup.js","components/Lineup/Service.js","components/Modals/Chords.js","components/Modals/Lyrics.js","data.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect, useContext, createContext } from 'react';\r\nimport { Grid, TextField, Card, Snackbar, Alert } from '@mui/material';\r\n\r\nimport { LINEUP } from '../../data';\r\nimport { AppCtx } from '../../App';\r\nimport LineupCard from './LineupCard';\r\nimport MobileDatePicker from '@mui/lab/MobileDatePicker';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\r\nimport {\r\n  GetSingleLineup,\r\n  RealtimeSongs,\r\n  UpdateLineup,\r\n} from '../../Firebase/songsApi';\r\nimport moment from 'moment';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nimport { getAuth } from 'firebase/auth';\r\nimport { FirebaseApp } from '../../Firebase';\r\nimport { SaveTwoTone } from '@mui/icons-material';\r\nimport Service from './Service';\r\n\r\nexport const EditLineupCtx = createContext(null);\r\n\r\nconst NewLineup = () => {\r\n  const params = useParams();\r\n  const auth = getAuth(FirebaseApp);\r\n  const user = auth.currentUser;\r\n  const history = useHistory();\r\n\r\n  const { scrollToTop } = useContext(AppCtx);\r\n  const [date, setDate] = useState(new Date());\r\n  const [lineupData, setLineupData] = useState([]);\r\n  const [saving, setSaving] = useState(false);\r\n  const [saved, setSaved] = useState(false);\r\n  const [service, setService] = useState(null);\r\n  const [songs, setSongs] = useState([]);\r\n  const [openService, setOpenService] = useState(false);\r\n\r\n  const { data } = RealtimeSongs();\r\n\r\n  useEffect(() => {\r\n    scrollToTop();\r\n    data && setSongs(data);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    getSundayOfCurrentWeek();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (params.id && data.length > 0) GetLineup();\r\n  }, [params.id, data]);\r\n\r\n  const GetLineup = async () => {\r\n    try {\r\n      const lineup = await GetSingleLineup({ id: params.id });\r\n      console.log({ GetLineup_songs_data: data });\r\n      if (lineup) {\r\n        console.log({ lineup });\r\n        setService(lineup?.service);\r\n        setDate(lineup?.date);\r\n        if (data?.length > 0) {\r\n          const lineupda_data = lineup?.songs.map((song) => {\r\n            console.log({ song });\r\n            const song_data = data.filter((s) => s.id === song.id)[0];\r\n            return { ...song, ...song_data };\r\n          });\r\n\r\n          const updated = LINEUP.map((l) => {\r\n            const f = lineupda_data.filter((d) => d.label === l.label)[0];\r\n            if (f) {\r\n              return f;\r\n            }\r\n            return l;\r\n          });\r\n\r\n          setLineupData(updated);\r\n        }\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log({ EDIT: lineupData });\r\n  }, [lineupData]);\r\n\r\n  const handleDateChange = (newValue) => {\r\n    setDate(newValue);\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    setSaving(true);\r\n\r\n    const data = {\r\n      id: params.id,\r\n      lineup: {\r\n        service,\r\n        songs: lineupData,\r\n        date: moment(date).format('LLLL'),\r\n        date_updated: moment(new Date()).format('LLLL'),\r\n        updated_by: {\r\n          email: user.email,\r\n          uid: user.uid,\r\n          displayName: user.displayName,\r\n          photoURL: user.photoURL,\r\n        },\r\n      },\r\n    };\r\n\r\n    console.log({ data });\r\n\r\n    await UpdateLineup(data);\r\n\r\n    setTimeout(() => {\r\n      setSaving(false);\r\n      setSaved(true);\r\n\r\n      setTimeout(() => {\r\n        setSaved(false);\r\n        history.push('/lineup');\r\n      }, 1000);\r\n    }, 1000);\r\n  };\r\n\r\n  const getSundayOfCurrentWeek = () => {\r\n    const today = new Date();\r\n    const first = today.getDate() - today.getDay() + 1;\r\n    const last = first + 6;\r\n\r\n    const sunday = new Date(today.setDate(last));\r\n    setDate(sunday);\r\n    return sunday;\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setSaved(false);\r\n  };\r\n\r\n  return (\r\n    <section\r\n      style={{\r\n        position: 'relative',\r\n        paddingBottom: 100,\r\n      }}\r\n    >\r\n      <Snackbar\r\n        open={saved}\r\n        autoHideDuration={1000}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n      >\r\n        <Alert onClose={handleClose} severity='success' sx={{ width: '100%' }}>\r\n          {params.id\r\n            ? 'Lineup successfully updated'\r\n            : 'New Lineup successfully created!'}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      {lineupData?.length > 0 && lineupData[0]?.title && service && (\r\n        <button\r\n          className='fixed bottom-[86px] right-[26px] w-[40px] h-[40px]  bg-green-500 text-white rounded-full z-50'\r\n          onClick={handleUpdate}\r\n          disabled={saving}\r\n        >\r\n          <span className='motion-safe:animate-ping absolute top-0 left-0 w-[100%] h-[100%] bg-green-500 text-black rounded-full z-40 opacity-30'></span>\r\n          <SaveTwoTone />\r\n        </button>\r\n      )}\r\n\r\n      <Grid container justifyContent='center' spacing={2}>\r\n        <Grid item xs={12} md={12}>\r\n          <Card sx={{ p: 2, mb: 2 }}>\r\n            {/* <FormControl fullWidth variant=\"standard\" required sx={{mb: 2}}>\r\n\t\t\t\t\t\t\t<InputLabel id=\"service-type\">Service</InputLabel>\r\n\t\t\t\t\t\t\t<Select labelId=\"service-type\" value={service} onChange={e => setService(e.target.value)}>\r\n\t\t\t\t\t\t\t\t<MenuItem value=\"Worship Service | Belleview\">Worship Service | Belleview</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem value=\"Worship Service | Lumina\">Worship Service | Lumina</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem value=\"Youth Service\">Youth Service</MenuItem>\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl> */}\r\n\r\n            <button\r\n              onClick={() => setOpenService(true)}\r\n              className='p-2 w-full bg-sky-400 rounded-md mb-4'\r\n            >\r\n              {service ? service : 'Select Worship Service'}\r\n            </button>\r\n\r\n            <Service\r\n              setOpen={setOpenService}\r\n              open={openService}\r\n              service={service}\r\n              setService={setService}\r\n            />\r\n\r\n            <LocalizationProvider dateAdapter={AdapterMoment}>\r\n              <MobileDatePicker\r\n                required\r\n                inputFormat='dddd LL'\r\n                label='Date'\r\n                value={date}\r\n                onChange={(value) => handleDateChange(value)}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    fullWidth\r\n                    size='small'\r\n                    variant='standard'\r\n                  />\r\n                )}\r\n              />\r\n            </LocalizationProvider>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={12}>\r\n          {/* <NewLineupCtx.Provider value={{songs, saving, setLineupData, setOpen}}> */}\r\n          {lineupData?.length > 0 &&\r\n            songs?.length > 0 &&\r\n            LINEUP.map((category, idx) => {\r\n              return (\r\n                <LineupCard\r\n                  key={category.id + idx}\r\n                  setLineupData={setLineupData}\r\n                  category={category}\r\n                  songs={songs}\r\n                  songData={\r\n                    lineupData.filter((s) => s?.label === category.label)[0]\r\n                  }\r\n                  saving={saving}\r\n                />\r\n              );\r\n            })}\r\n          {/* </NewLineupCtx.Provider> */}\r\n        </Grid>\r\n      </Grid>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default React.memo(NewLineup);\r\n","import { Autocomplete, createFilterOptions, TextField } from '@mui/material';\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nconst AutocompleteSong = ({ songs, category, handleUpdateCard }) => {\r\n  const [value, setValue] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // console.log({ value });\r\n    value?.title && handleUpdateCard(value);\r\n  }, [value]);\r\n\r\n  console.log('Rendering: ' + category.label);\r\n\r\n  return (\r\n    <div>\r\n      <Autocomplete\r\n        value={value}\r\n        onChange={(event, newValue) => {\r\n          if (typeof newValue === 'string') {\r\n            setValue({\r\n              title: newValue,\r\n              artist: null,\r\n              album: null,\r\n              lyrics: null,\r\n              chords: null,\r\n              media: null,\r\n              id: null,\r\n            });\r\n          } else if (newValue && newValue.inputValue) {\r\n            // Create a new value from the user input\r\n            setValue({\r\n              title: newValue.inputValue,\r\n              artist: null,\r\n              album: null,\r\n              lyrics: null,\r\n              chords: null,\r\n              media: null,\r\n              id: null,\r\n            });\r\n          } else {\r\n            setValue(newValue);\r\n          }\r\n        }}\r\n        filterOptions={(options, params) => {\r\n          const filtered = filter(options, params);\r\n\r\n          const { inputValue } = params;\r\n          // Suggest the creation of a new value\r\n          const isExisting = options.some(\r\n            (option) => inputValue === option.title\r\n          );\r\n          if (inputValue !== '' && !isExisting) {\r\n            filtered.push({\r\n              inputValue,\r\n              title: `Add \"${inputValue}\"`,\r\n            });\r\n          }\r\n\r\n          return filtered;\r\n        }}\r\n        selectOnFocus\r\n        clearOnBlur\r\n        handleHomeEndKeys\r\n        id='free-solo-with-text-demo'\r\n        options={songs}\r\n        getOptionLabel={(option) => {\r\n          // Value selected with enter, right from the input\r\n          if (typeof option === 'string') {\r\n            return option;\r\n          }\r\n          // Add \"xxx\" option created dynamically\r\n          if (option.inputValue) {\r\n            return option.inputValue;\r\n          }\r\n          // Regular option\r\n          return option.title;\r\n        }}\r\n        renderOption={(props, option) => <li {...props}>{option.title}</li>}\r\n        // sx={{ width: 300 }}\r\n        freeSolo\r\n        fullWidth\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label={category.label}\r\n            fullWidth\r\n            variant='standard'\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(AutocompleteSong);\r\n","import React, { useCallback, useContext, useState, useEffect } from 'react';\r\nimport {\r\n  FormControl,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Card,\r\n  IconButton,\r\n  Input,\r\n  InputAdornment,\r\n  InputLabel,\r\n  CardActions,\r\n  CardContent,\r\n  Select,\r\n  MenuItem,\r\n  Autocomplete,\r\n  createFilterOptions,\r\n  useTheme,\r\n  Switch,\r\n  FormGroup,\r\n  FormControlLabel,\r\n  Modal,\r\n} from '@mui/material';\r\nimport {\r\n  NoteAlt,\r\n  MusicNote,\r\n  PlayArrow,\r\n  CloseOutlined,\r\n  Close,\r\n  TextSnippet,\r\n} from '@mui/icons-material';\r\nimport AutocompleteSong from './AutocompleteSong';\r\nimport { NewLineupCtx } from './NewLineup';\r\nimport Lyrics from '../Modals/Lyrics';\r\nimport Chords from '../Modals/Chords';\r\nimport { GetSong } from '../../Firebase/songsApi';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nconst initialState = {\r\n  song_title: null,\r\n  artist: null,\r\n  album: null,\r\n  lyrics: null,\r\n  chords: null,\r\n  media: null,\r\n  from: null,\r\n  song_id: null,\r\n  is_new: false,\r\n};\r\n\r\nconst LineupCard = ({ category, setLineupData, songs, songData, saving }) => {\r\n  const [cardData, setCardData] = useState(songData || initialState);\r\n\r\n  const [newSong, setNewSong] = useState(false);\r\n  const [open, setOpen] = useState({ modal: null, status: false });\r\n  const [filteredSongs, setFilteredSongs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setCardData(initialState);\r\n  }, [newSong]);\r\n\r\n  // useEffect(() => {\r\n  // \tconsole.log({songData, label: category.label})\r\n  // \t// setCardData(songData ? songData : initialState)\r\n  // }, [songData])\r\n\r\n  const handleFilterSongs = useCallback(() => {\r\n    if (songs?.length > 0 && category.id) {\r\n      const filtered = songs?.filter(\r\n        (song) => song?.tags?.length > 0 && song?.tags[0] === category?.tags[0]\r\n      );\r\n      setFilteredSongs(filtered);\r\n    }\r\n  }, [songs]);\r\n\r\n  useEffect(() => {\r\n    handleFilterSongs();\r\n  }, [songs, handleFilterSongs]);\r\n\r\n  const handleSetLineup = useCallback(() => {\r\n    setLineupData((lineupdata) => {\r\n      console.log({ lineupdata, category });\r\n      return lineupdata.map((song) => {\r\n        if (song.label === category.label) {\r\n          return cardData.title\r\n            ? {\r\n                ...song,\r\n                ...cardData,\r\n                is_new: newSong,\r\n              }\r\n            : category;\r\n        }\r\n\r\n        return song;\r\n      });\r\n    });\r\n  }, [cardData, category]);\r\n\r\n  useEffect(() => {\r\n    if (cardData.title) {\r\n      console.log({ songData, cardData });\r\n      handleSetLineup();\r\n    }\r\n  }, [cardData, newSong]);\r\n\r\n  const handleUpdateCard = useCallback(\r\n    (value) => {\r\n      console.log({ value });\r\n      setLineupData((lineupdata) => {\r\n        console.log({ lineupdata });\r\n        return lineupdata.map((song) => {\r\n          console.log({ song, category });\r\n          if (song.id === category.id) {\r\n            return {\r\n              ...song,\r\n              ...value,\r\n            };\r\n          }\r\n\r\n          return song;\r\n        });\r\n      });\r\n      // setCardData(value);\r\n    },\r\n    [category]\r\n  );\r\n\r\n  return (\r\n    <Grid item xs={12} md={12}>\r\n      <Modal\r\n        open={open.status}\r\n        onClose={() => setOpen({ modal: null, status: false })}\r\n      >\r\n        {open.modal === 'lyrics' ? (\r\n          <Lyrics\r\n            setCardData={setCardData}\r\n            setOpen={setOpen}\r\n            cardData={songData || cardData}\r\n            category={category}\r\n          />\r\n        ) : (\r\n          <Chords\r\n            setCardData={setCardData}\r\n            setOpen={setOpen}\r\n            cardData={songData || cardData}\r\n            category={category}\r\n          />\r\n        )}\r\n      </Modal>\r\n\r\n      <Card sx={{ mb: 2 }}>\r\n        <CardContent>\r\n          {/* <div>\r\n            <FormGroup className='inline-block'>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={newSong}\r\n                    onChange={() => setNewSong(!newSong)}\r\n                  />\r\n                }\r\n                label='New'\r\n              />\r\n            </FormGroup>\r\n          </div> */}\r\n\r\n          {newSong ? (\r\n            <TextField\r\n              label={category.label}\r\n              fullWidth\r\n              size='small'\r\n              variant='standard'\r\n              value={cardData.title || cardData.song_title}\r\n              disabled={saving}\r\n              onChange={(e) =>\r\n                setCardData({ ...cardData, title: e.target.value })\r\n              }\r\n            />\r\n          ) : (\r\n            <FormControl variant='standard' fullWidth>\r\n              {/* {console.log({\"@Select:\": cardData})} */}\r\n              <InputLabel>{category.label}</InputLabel>\r\n              <Select\r\n                value={songData?.id || cardData.id}\r\n                onChange={(e) =>\r\n                  setCardData({\r\n                    ...songs?.filter((s) => s.id === e.target.value)[0],\r\n                  })\r\n                }\r\n              >\r\n                {filteredSongs.map((song) => {\r\n                  return <MenuItem key={song.id} value={song.id}>{song.title}</MenuItem>;\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n          )}\r\n\r\n          {/* <Grid\r\n            container\r\n            sx={{ mt: 1, width: '100%' }}\r\n            spacing={1}\r\n            justifyContent='left'\r\n          >\r\n            <Grid item xs={6} md={6}>\r\n              <TextField\r\n                label='Artist'\r\n                fullWidth\r\n                size='small'\r\n                variant='standard'\r\n                value={cardData?.artist || songData?.artist}\r\n                disabled={saving}\r\n                onChange={(e) =>\r\n                  setCardData({ ...cardData, artist: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} md={6}>\r\n              <TextField\r\n                label='Album'\r\n                fullWidth\r\n                size='small'\r\n                variant='standard'\r\n                value={cardData?.album || songData?.album}\r\n                disabled={saving}\r\n                onChange={(e) =>\r\n                  setCardData({ ...cardData, album: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid> */}\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default React.memo(LineupCard);\r\n","import Axios from 'axios';\r\nconst API_KEY = 'AIzaSyAIK-xSvm5CGsMq67HoTAsJR1c-u-4B7b8';\r\n\r\nexport default Axios.create({\r\n  baseURL: 'https://youtube.googleapis.com/youtube/v3/',\r\n  params: {\r\n    part: 'snippet',\r\n    maxResults: 15,\r\n    key: API_KEY,\r\n  },\r\n});\r\n","import { Card, Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\n\r\nconst VideoItem = ({ video, setCurrentVideo }) => {\r\n  const { snippet } = video;\r\n  const { url, height, width } = snippet.thumbnails.default;\r\n\r\n  return (\r\n    <Card sx={{ p: 1, mb: 1 }} onClick={() => setCurrentVideo(video)}>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={4} md={4}>\r\n          <img src={url} alt={snippet.title} style={{ width: '100%' }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={8} md={8}>\r\n          <small>\r\n            <strong>{snippet.title}</strong>\r\n          </small>\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default VideoItem;\r\n","import {\r\n  Card,\r\n  Grid,\r\n  IconButton,\r\n  OutlinedInput,\r\n  TextField,\r\n  InputAdornment,\r\n  Button,\r\n} from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Search, ArrowBack } from '@mui/icons-material';\r\nimport Youtube from '../../Youtube';\r\nimport VideoItem from '../Video/VideoItem';\r\n\r\nconst Media = () => {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [results, setResults] = useState([]);\r\n  const [currentVideo, setCurrentVideo] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log({ currentVideo });\r\n  }, [currentVideo]);\r\n\r\n  const handleSearch = async () => {\r\n    try {\r\n      console.log({ searchText });\r\n      const res = await Youtube.get('/search', {\r\n        params: {\r\n          q: searchText,\r\n        },\r\n      });\r\n\r\n      console.log({ res: res.data.items });\r\n\r\n      setResults(res.data.items);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <img src={YOUTUBE_LOGO} alt='' style={{ width: '20%' }} /> */}\r\n\r\n      <Grid container sx={{ mb: 1 }} alignContent='center'>\r\n        <Grid item xs={12} md={12}>\r\n          <OutlinedInput\r\n            // label='Search YouTube'\r\n            onChange={(e) => setSearchText(e.target.value)}\r\n            size='small'\r\n            fullWidth\r\n            endAdornment={\r\n              <InputAdornment position='end'>\r\n                <IconButton\r\n                  onClick={handleSearch}\r\n                  disabled={!searchText}\r\n                  edge='end'\r\n                >\r\n                  <Search />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </Grid>\r\n\r\n        {currentVideo?.snippet && (\r\n          <Button\r\n            startIcon={<ArrowBack />}\r\n            variant='outlined'\r\n            sx={{ mt: 1 }}\r\n            onClick={() => setCurrentVideo({})}\r\n            size='small'\r\n          >\r\n            Back\r\n          </Button>\r\n        )}\r\n\r\n        {currentVideo?.snippet ? (\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={12}\r\n            sx={{ display: 'flex', justifyContent: 'center' }}\r\n          >\r\n            <iframe\r\n              src={`https://www.youtube.com/embed/${currentVideo?.id?.videoId}`}\r\n              allowFullScreen\r\n              title={currentVideo?.snippet?.title}\r\n              style={{ marginTop: 24, boxShadow: 'none', border: 'none' }}\r\n            />\r\n          </Grid>\r\n        ) : (\r\n          <Grid item sx={{ mt: 2, maxHeight: 500, overflow: 'auto' }}>\r\n            {results.map((video) => (\r\n              <VideoItem\r\n                key={video.id.videoId}\r\n                video={video}\r\n                setCurrentVideo={setCurrentVideo}\r\n              />\r\n            ))}\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Media;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect, useContext, createContext } from 'react';\r\nimport { Grid, TextField, Modal, Card, Snackbar, Alert } from '@mui/material';\r\n\r\nimport { LINEUP } from '../../data';\r\nimport { AppCtx } from '../../App';\r\nimport LineupCard from './LineupCard';\r\nimport Lyrics from '../Modals/Lyrics';\r\nimport Chords from '../Modals/Chords';\r\nimport Media from '../Modals/Media';\r\nimport MobileDatePicker from '@mui/lab/MobileDatePicker';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\r\nimport {\r\n  AddLineup,\r\n  RealtimeSongs,\r\n  UpdateLineup,\r\n} from '../../Firebase/songsApi';\r\nimport moment from 'moment';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nimport { getAuth } from 'firebase/auth';\r\nimport { FirebaseApp } from '../../Firebase';\r\nimport { SaveTwoTone } from '@mui/icons-material';\r\nimport Service from './Service';\r\n\r\nexport const NewLineupCtx = createContext(null);\r\n\r\nconst NewLineup = () => {\r\n  const params = useParams();\r\n  const auth = getAuth(FirebaseApp);\r\n  const user = auth.currentUser;\r\n  const history = useHistory();\r\n  const [open, setOpen] = useState({\r\n    id: null,\r\n    status: false,\r\n    song_title: null,\r\n  });\r\n\r\n  const { lineups, scrollToTop } = useContext(AppCtx);\r\n  const [date, setDate] = useState(new Date());\r\n  const [lineupData, setLineupData] = useState([]);\r\n  const [saving, setSaving] = useState(false);\r\n  const [saved, setSaved] = useState(false);\r\n  const [service, setService] = useState(null);\r\n  const [songs, setSongs] = useState([]);\r\n  const [openService, setOpenService] = useState(false);\r\n\r\n  const { data } = RealtimeSongs();\r\n\r\n  useEffect(() => {\r\n    scrollToTop();\r\n    data && setSongs(data);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    setOpenService(true);\r\n    getSundayOfCurrentWeek();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (params.id) {\r\n      const filtered = lineups.filter((l) => l.id === params.id)[0];\r\n      console.log({ filtered });\r\n      setService(filtered?.service);\r\n      setDate(filtered?.date);\r\n      setLineupData(filtered?.songs);\r\n    } else {\r\n      setLineupData(LINEUP);\r\n    }\r\n  }, [LINEUP, params.id]);\r\n\r\n  useEffect(() => {\r\n    console.log({ EDIT: lineupData });\r\n  }, [lineupData]);\r\n\r\n  const handleDateChange = (newValue) => {\r\n    setDate(newValue);\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (service) {\r\n      setSaving(true);\r\n\r\n      const saved = await AddLineup({\r\n        lineup: {\r\n          date_created: moment(new Date()).format('LLLL'),\r\n          songs: lineupData.filter((l) => l.title),\r\n          worship_leader: {\r\n            uid: user.uid,\r\n            photoURL: user.photoURL,\r\n            displayName: user.displayName,\r\n          },\r\n          date: moment(date).format('LLLL'),\r\n          service,\r\n        },\r\n      });\r\n\r\n      if (saved?.id) {\r\n        setSaving(false);\r\n        setSaved(true);\r\n\r\n        setTimeout(() => {\r\n          setSaved(false);\r\n          history.push('/lineup');\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    setSaving(true);\r\n\r\n    const res = await UpdateLineup({\r\n      id: params.id,\r\n      lineup: {\r\n        service,\r\n        songs: lineupData,\r\n        date: moment(date).format('LLLL'),\r\n        date_updated: moment(new Date()).format('LLLL'),\r\n        updated_by: {\r\n          email: user.email,\r\n          uid: user.uid,\r\n          displayName: user.displayName,\r\n          photoURL: user.photoURL,\r\n        },\r\n      },\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setSaving(false);\r\n      setSaved(true);\r\n\r\n      setTimeout(() => {\r\n        setSaved(false);\r\n        history.push('/lineup');\r\n      }, 1000);\r\n    }, 1000);\r\n  };\r\n\r\n  const getSundayOfCurrentWeek = () => {\r\n    const today = new Date();\r\n    const first = today.getDate() - today.getDay() + 1;\r\n    const last = first + 6;\r\n\r\n    const sunday = new Date(today.setDate(last));\r\n    setDate(sunday);\r\n    return sunday;\r\n  };\r\n\r\n  const ModalContent = () => {\r\n    switch (open.id) {\r\n      case 'Lyrics':\r\n        return (\r\n          <Lyrics\r\n            setLineupData={setLineupData}\r\n            song={open}\r\n            lineupData={lineupData}\r\n            setOpen={setOpen}\r\n          />\r\n        );\r\n      case 'Chords':\r\n        return (\r\n          <Chords\r\n            setLineupData={setLineupData}\r\n            song={open}\r\n            lineupData={lineupData}\r\n            setOpen={setOpen}\r\n          />\r\n        );\r\n      case 'Media':\r\n        return (\r\n          <Media\r\n            setLineupData={setLineupData}\r\n            song={open}\r\n            lineupData={lineupData}\r\n          />\r\n        );\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setSaved(false);\r\n  };\r\n\r\n  return (\r\n    <section\r\n      style={{\r\n        position: 'relative',\r\n        paddingBottom: 100,\r\n      }}\r\n    >\r\n      <Snackbar\r\n        open={saved}\r\n        autoHideDuration={1000}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n      >\r\n        <Alert onClose={handleClose} severity='success' sx={{ width: '100%' }}>\r\n          {params.id\r\n            ? 'Lineup successfully updated'\r\n            : 'New Lineup successfully created!'}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      {lineupData?.length > 0 && service && (\r\n        <button\r\n          className='fixed bottom-[86px] right-[26px] w-[40px] h-[40px]  bg-green-500 text-white rounded-full z-50'\r\n          onClick={handleSave}\r\n        >\r\n          <span className='motion-safe:animate-ping absolute top-0 left-0 w-[100%] h-[100%] bg-green-500 text-black rounded-full z-40 opacity-30'></span>\r\n          <SaveTwoTone />\r\n        </button>\r\n      )}\r\n\r\n      <Modal\r\n        open={open.status}\r\n        onClose={() => setOpen({ id: null, status: false, song_title: null })}\r\n      >\r\n        {ModalContent()}\r\n      </Modal>\r\n\r\n      <Grid container justifyContent='center' spacing={2}>\r\n        <Grid item xs={12} md={12}>\r\n          <Card sx={{ p: 2, mb: 2 }}>\r\n            <button\r\n              onClick={() => setOpenService(true)}\r\n              className='p-2 w-full bg-sky-400 rounded-md mb-4'\r\n            >\r\n              {service ? service : 'Select Worship Service'}\r\n            </button>\r\n            <Service\r\n              setOpen={setOpenService}\r\n              open={openService}\r\n              service={service}\r\n              setService={setService}\r\n            />\r\n\r\n            <LocalizationProvider dateAdapter={AdapterMoment}>\r\n              <MobileDatePicker\r\n                required\r\n                inputFormat='dddd LL'\r\n                label='Date'\r\n                value={date}\r\n                onChange={(value) => handleDateChange(value)}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    fullWidth\r\n                    size='small'\r\n                    variant='standard'\r\n                  />\r\n                )}\r\n              />\r\n            </LocalizationProvider>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={12}>\r\n          <NewLineupCtx.Provider\r\n            value={{ songs, saving, setLineupData, setOpen }}\r\n          >\r\n            {lineupData?.length > 0 &&\r\n              songs?.length > 0 &&\r\n              LINEUP.map((category, idx) => {\r\n                return (\r\n                  <LineupCard\r\n                    setLineupData={setLineupData}\r\n                    key={category.id + idx}\r\n                    category={category}\r\n                    songs={songs}\r\n                    lineupData={lineupData}\r\n                  />\r\n                );\r\n              })}\r\n          </NewLineupCtx.Provider>\r\n        </Grid>\r\n      </Grid>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default React.memo(NewLineup);\r\n","import { ChurchTwoTone } from '@mui/icons-material';\r\nimport {\r\n  Avatar,\r\n  Dialog,\r\n  DialogTitle,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n} from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst JIL_BELLEVIEW =\r\n  'https://firebasestorage.googleapis.com/v0/b/wan-belleview.appspot.com/o/other%2FJIL%20Belleview%20SM.jpg?alt=media&token=3354d3cb-e9af-46e8-bbbc-ddaf7e0ec118';\r\n\r\nconst KKB_BELLEVIEW =\r\n  'https://firebasestorage.googleapis.com/v0/b/wan-belleview.appspot.com/o/other%2FKKB%20Belleview.jpg?alt=media&token=43ebe990-3181-40e5-b38e-bfe39202e972';\r\n\r\nconst PRAYER_NIGHT =\r\n  'https://firebasestorage.googleapis.com/v0/b/wan-belleview.appspot.com/o/other%2FPrayer%20Night.jpg?alt=media&token=3294f7b4-ee28-42b6-8f64-9edc452ed2ea';\r\n\r\nconst PRAYER_MEETING =\r\n  'https://firebasestorage.googleapis.com/v0/b/wan-belleview.appspot.com/o/other%2FPrayer%20Meeting.jpg?alt=media&token=2f341f4b-a5be-484f-bd97-46a25774d033';\r\n\r\nconst Service = ({ setOpen, open, service, setService }) => {\r\n  // const [services, setService] = useState(null)\r\n  useEffect(() => {\r\n    setOpen(false);\r\n  }, [service]);\r\n  return (\r\n    <Dialog onClose={() => setOpen(false)} open={open}>\r\n      <DialogTitle>Select Worship Service</DialogTitle>\r\n      <List sx={{ pt: 0 }}>\r\n        <ListItem\r\n          autoFocus={service === 'Worship Service | Belleview'}\r\n          button\r\n          onClick={() => setService('Worship Service | Belleview')}\r\n        >\r\n          <ListItemAvatar>\r\n            <Avatar src={JIL_BELLEVIEW} />\r\n          </ListItemAvatar>\r\n          <ListItemText primary='Belleview' />\r\n        </ListItem>\r\n\r\n        <ListItem\r\n          autoFocus={service === 'Worship Service | Lumina'}\r\n          button\r\n          onClick={() => setService('Worship Service | Lumina')}\r\n        >\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <ChurchTwoTone />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary='Lumina' />\r\n        </ListItem>\r\n        <ListItem\r\n          autoFocus={service === 'Youth Service'}\r\n          button\r\n          onClick={() => setService('Youth Service')}\r\n        >\r\n          <ListItemAvatar>\r\n            <Avatar src={KKB_BELLEVIEW} />\r\n          </ListItemAvatar>\r\n          <ListItemText primary='Youth Service' />\r\n        </ListItem>\r\n        <ListItem\r\n          autoFocus={service === 'Prayer Night'}\r\n          button\r\n          onClick={() => setService('Prayer Night')}\r\n        >\r\n          <ListItemAvatar>\r\n            <Avatar src={PRAYER_NIGHT} />\r\n          </ListItemAvatar>\r\n          <ListItemText primary='Prayer Night' />\r\n        </ListItem>\r\n        <ListItem\r\n          autoFocus={service === 'Prayer Meeting'}\r\n          button\r\n          onClick={() => setService('Prayer Meeting')}\r\n        >\r\n          <ListItemAvatar>\r\n            <Avatar src={PRAYER_MEETING} />\r\n          </ListItemAvatar>\r\n          <ListItemText primary='Prayer Meeting' />\r\n        </ListItem>\r\n      </List>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default Service;\r\n","import {\r\n  TextField,\r\n  Typography,\r\n  Card,\r\n  CardActions,\r\n  Button,\r\n  Snackbar,\r\n  Alert,\r\n} from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { UpdateChords } from '../../Firebase/songsApi';\r\n\r\nconst Chords = ({ setCardData, cardData, category, setOpen }) => {\r\n  const [chords, setChords] = useState({\r\n    verse: null,\r\n    pre_chorus: null,\r\n    chorus: null,\r\n  });\r\n\r\n  const [updating, setUpdating] = useState(false);\r\n  const [updated, setUpdated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log({ Chords: cardData });\r\n  }, [cardData]);\r\n\r\n  useEffect(() => {\r\n    if (cardData.chords?.verse) {\r\n      console.log(cardData.chords);\r\n      setChords(cardData.chords);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCardData((data) => ({ ...data, chords }));\r\n  }, [chords]);\r\n\r\n  const handleSaveChords = async () => {\r\n    try {\r\n      setUpdating(true);\r\n      const res = await UpdateChords({ id: cardData.id, chords });\r\n      console.log({ res });\r\n      setUpdating(false);\r\n      setUpdated(true);\r\n\r\n      setTimeout(() => {\r\n        setUpdated(false);\r\n      }, 1000);\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Snackbar\r\n        open={updated}\r\n        autoHideDuration={1000}\r\n        // onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n      >\r\n        <Alert severity='success' sx={{ width: '100%' }}>\r\n          Chords Successfully Updated!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Card\r\n        sx={{\r\n          width: '90%',\r\n          position: 'absolute',\r\n          top: '30%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          p: 2,\r\n          pb: 0,\r\n          boxSizing: 'border-box',\r\n          // minHeight: 500,\r\n        }}\r\n      >\r\n        <Typography variant='h6' sx={{ mb: 2 }}>\r\n          {cardData.title || category.label} <small>| Chords</small>\r\n        </Typography>\r\n\r\n        <TextField\r\n          label='Verse'\r\n          fullWidth\r\n          variant='standard'\r\n          multiline\r\n          value={chords.verse}\r\n          onChange={(e) => setChords({ ...chords, verse: e.target.value })}\r\n          sx={{ mb: 2 }}\r\n          disabled={updating}\r\n        />\r\n        <TextField\r\n          label='Pre-chorus'\r\n          fullWidth\r\n          variant='standard'\r\n          multiline\r\n          value={chords.pre_chorus}\r\n          sx={{ mb: 2 }}\r\n          onChange={(e) => setChords({ ...chords, pre_chorus: e.target.value })}\r\n          disabled={updating}\r\n        />\r\n        <TextField\r\n          label='Chorus'\r\n          fullWidth\r\n          variant='standard'\r\n          multiline\r\n          value={chords.chorus}\r\n          onChange={(e) => setChords({ ...chords, chorus: e.target.value })}\r\n          disabled={updating}\r\n        />\r\n        <CardActions\r\n          className='mt-2 px-0 pb-4 justify-end'\r\n          // sx={{ justifyContent: 'right', mt: 2 }}\r\n        >\r\n          {cardData.id && !cardData.is_new ? (\r\n            <button\r\n              className='py-1 px-3 bg-green-600 text-white rounded-md'\r\n              onClick={handleSaveChords}\r\n              disabled={updating}\r\n            >\r\n              Save Chords\r\n            </button>\r\n          ) : (\r\n            <Button\r\n              size='small'\r\n              onClick={() =>\r\n                setOpen({ id: null, status: false, song_title: null })\r\n              }\r\n            >\r\n              Done\r\n            </Button>\r\n          )}\r\n        </CardActions>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chords;\r\n","import {\r\n  TextField,\r\n  Typography,\r\n  Card,\r\n  CardActions,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  Button,\r\n  Snackbar,\r\n  Alert,\r\n} from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Add } from '@mui/icons-material';\r\nimport PopperUnstyled from '@mui/base/PopperUnstyled';\r\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\r\nimport { UpdateLyrics } from '../../Firebase/songsApi';\r\n\r\nconst Lyrics = ({ setCardData, cardData, setOpen, category }) => {\r\n  const [lyrics, setLyrics] = useState({\r\n    verse: null,\r\n    pre_chorus: null,\r\n    chorus: null,\r\n  });\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [updating, setUpdating] = useState(false);\r\n  const [updated, setUpdated] = useState(false);\r\n\r\n  console.log({ Lyrics: cardData });\r\n\r\n  useEffect(() => {\r\n    if (cardData.lyrics?.verse) {\r\n      console.log(cardData.lyrics);\r\n      setLyrics(cardData.lyrics);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCardData((cardData) => ({ ...cardData, lyrics }));\r\n  }, [lyrics]);\r\n\r\n  const isOpen = Boolean(anchorEl);\r\n  const id = isOpen ? 'about-popper' : undefined;\r\n\r\n  const handleSaveLyrics = async () => {\r\n    try {\r\n      setUpdating(true);\r\n      const res = await UpdateLyrics({ id: cardData.id, lyrics });\r\n      console.log({ res });\r\n      setUpdating(false);\r\n      setUpdated(true);\r\n\r\n      setTimeout(() => {\r\n        setUpdated(false);\r\n      }, 1000);\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Snackbar\r\n        open={updated}\r\n        autoHideDuration={1000}\r\n        // onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n      >\r\n        <Alert severity='success' sx={{ width: '100%' }}>\r\n          Lyrics Successfully Updated!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Card\r\n        sx={{\r\n          width: '90%',\r\n          position: 'absolute',\r\n          top: '30%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          p: 2,\r\n          pb: 0,\r\n          boxSizing: 'border-box',\r\n          // minHeight: 500,\r\n        }}\r\n      >\r\n        <Typography variant='h6' sx={{ mb: 2 }}>\r\n          {cardData.title || category.label} <small>| Lyrics</small>\r\n        </Typography>\r\n\r\n        <TextField\r\n          label='Verse'\r\n          fullWidth\r\n          variant='standard'\r\n          multiline\r\n          value={lyrics.verse}\r\n          onChange={(e) => setLyrics({ ...lyrics, verse: e.target.value })}\r\n          sx={{ mb: 2 }}\r\n          maxRows={5}\r\n        />\r\n        <TextField\r\n          label='Pre-chorus'\r\n          fullWidth\r\n          variant='standard'\r\n          multiline\r\n          value={lyrics.pre_chorus}\r\n          sx={{ mb: 2 }}\r\n          maxRows={5}\r\n          onChange={(e) => setLyrics({ ...lyrics, pre_chorus: e.target.value })}\r\n        />\r\n        <TextField\r\n          label='Chorus'\r\n          fullWidth\r\n          variant='standard'\r\n          multiline\r\n          value={lyrics.chorus}\r\n          onChange={(e) => setLyrics({ ...lyrics, chorus: e.target.value })}\r\n          maxRows={5}\r\n        />\r\n\r\n        <CardActions className='mt-2 px-0 pb-4 justify-end'>\r\n          {cardData.id && !cardData.is_new ? (\r\n            <button\r\n              className='py-1 px-3 bg-green-600 text-white rounded-md'\r\n              onClick={handleSaveLyrics}\r\n              disabled={updating}\r\n            >\r\n              Save Lyrics\r\n            </button>\r\n          ) : (\r\n            <Button\r\n              size='small'\r\n              onClick={() =>\r\n                setOpen({ id: null, status: false, song_title: null })\r\n              }\r\n            >\r\n              Done\r\n            </Button>\r\n          )}\r\n        </CardActions>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Lyrics;\r\n","const VIA = [\r\n  {\r\n    id: 'via-1',\r\n    name: 'Nikki Cueno',\r\n    is_available: true,\r\n    is_wl: false,\r\n  },\r\n  {\r\n    id: 'via-2',\r\n    name: 'Justine Judilla',\r\n    is_available: true,\r\n    is_wl: false,\r\n  },\r\n  {\r\n    id: 'via-3',\r\n    name: 'Eunice Nikki Floralde',\r\n    is_available: true,\r\n    is_wl: false,\r\n  },\r\n  {\r\n    id: 'via-4',\r\n    name: 'John Pallan',\r\n    is_available: true,\r\n    is_wl: false,\r\n  },\r\n  {\r\n    id: 'via-5',\r\n    name: 'Diane Agreda',\r\n    is_available: true,\r\n    is_wl: false,\r\n  },\r\n  {\r\n    id: 'via-6',\r\n    name: 'Reisel Ann Cayao',\r\n    is_available: true,\r\n    is_wl: false,\r\n  },\r\n];\r\n\r\nconst LINEUP = [\r\n  {\r\n    id: 'os-1',\r\n    label: 'Opening Song',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: true,\r\n    tags: ['Solemn'],\r\n  },\r\n  {\r\n    id: 'ws-1',\r\n    label: 'Welcome Song',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: false,\r\n    tags: ['Joyful'],\r\n  },\r\n  {\r\n    id: 'js-1',\r\n    label: 'Joyful Song #1',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: false,\r\n    tags: ['Joyful'],\r\n  },\r\n  {\r\n    id: 'js-2',\r\n    label: 'Joyful Song #2',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: false,\r\n    tags: ['Joyful'],\r\n  },\r\n  {\r\n    id: 'js-3',\r\n    label: 'Joyful Song #3',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: false,\r\n    tags: ['Joyful'],\r\n  },\r\n  {\r\n    id: 'ss-1',\r\n    label: 'Solemn Song #1',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: true,\r\n    tags: ['Solemn'],\r\n  },\r\n  {\r\n    id: 'ss-2',\r\n    label: 'Solemn Song #2',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: true,\r\n    tags: ['Solemn'],\r\n  },\r\n  {\r\n    id: 'ss-3',\r\n    label: 'Solemn Song #3',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: true,\r\n    tags: ['Solemn'],\r\n  },\r\n  {\r\n    id: 'ps-1',\r\n    label: 'Pastoral Song',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: true,\r\n    tags: ['Solemn'],\r\n  },\r\n  {\r\n    id: 'vs-1',\r\n    label: 'Victory Song',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: false,\r\n    tags: ['Joyful'],\r\n  },\r\n  {\r\n    id: 'cs-1',\r\n    label: 'Closing Song',\r\n    artist: null,\r\n    album: null,\r\n    lyrics: null,\r\n    chords: null,\r\n    media: null,\r\n    song: null,\r\n    disabled: false,\r\n    is_solemn: true,\r\n    tags: ['Solemn'],\r\n  },\r\n];\r\n\r\nconst ASSIGNER = 'k4gcy3yNWqa02aUfhw8J4fn7sS63';\r\nconst ADMIN = 'Hfhcau8TAiXR4T4FEAXp7eipDvz2';\r\n\r\nconst Glass = (theme) => ({\r\n  background: `${theme.palette.background.paper}90`,\r\n  backdropFilter: 'blur(5px)',\r\n});\r\n\r\nexport { VIA, LINEUP, Glass, ASSIGNER, ADMIN };\r\n"],"names":["EditLineupCtx","createContext","NewLineup","params","useParams","user","getAuth","FirebaseApp","currentUser","history","useHistory","scrollToTop","useContext","AppCtx","useState","Date","date","setDate","lineupData","setLineupData","saving","setSaving","saved","setSaved","service","setService","songs","setSongs","openService","setOpenService","data","RealtimeSongs","useEffect","getSundayOfCurrentWeek","id","length","GetLineup","GetSingleLineup","lineup","console","log","GetLineup_songs_data","lineupda_data","map","song","song_data","filter","s","updated","LINEUP","l","f","d","label","EDIT","handleUpdate","moment","format","date_updated","updated_by","email","uid","displayName","photoURL","UpdateLineup","setTimeout","push","today","last","getDate","getDay","sunday","handleClose","style","position","paddingBottom","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","title","className","onClick","disabled","container","justifyContent","spacing","item","xs","md","p","mb","setOpen","dateAdapter","AdapterMoment","required","inputFormat","value","onChange","renderInput","fullWidth","size","variant","category","idx","songData","React","createFilterOptions","initialState","song_title","artist","album","lyrics","chords","media","from","song_id","is_new","LineupCard","cardData","setCardData","newSong","modal","status","filteredSongs","setFilteredSongs","handleFilterSongs","useCallback","filtered","tags","handleSetLineup","lineupdata","Grid","Modal","Lyrics","Chords","Card","CardContent","e","target","FormControl","InputLabel","Select","MenuItem","Axios","baseURL","part","maxResults","key","video","setCurrentVideo","snippet","thumbnails","default","url","height","src","alt","searchText","setSearchText","results","setResults","currentVideo","handleSearch","Youtube","get","q","res","items","alignContent","OutlinedInput","endAdornment","InputAdornment","IconButton","edge","Search","Button","startIcon","ArrowBack","mt","display","videoId","allowFullScreen","marginTop","boxShadow","border","maxHeight","overflow","NewLineupCtx","lineups","handleSave","AddLineup","date_created","worship_leader","Snackbar","Alert","SaveTwoTone","ModalContent","Service","LocalizationProvider","MobileDatePicker","TextField","Provider","pt","autoFocus","button","primary","verse","pre_chorus","chorus","setChords","updating","setUpdating","setUpdated","handleSaveChords","UpdateChords","message","top","left","transform","pb","boxSizing","multiline","setLyrics","anchorEl","Boolean","handleSaveLyrics","UpdateLyrics","maxRows","is_solemn","ASSIGNER","ADMIN"],"sourceRoot":""}