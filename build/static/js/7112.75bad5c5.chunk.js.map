{"version":3,"file":"static/js/7112.75bad5c5.chunk.js","mappings":"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","sources":["../node_modules/@mui/base/NoSsr/NoSsr.js","../node_modules/@mui/material/SwipeableDrawer/SwipeArea.js","../node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction NoSsr(props) {\n  const {\n    children,\n    defer = false,\n    fallback = null\n  } = props;\n  const [mountedState, setMountedState] = React.useState(false);\n  useEnhancedEffect(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountedState ? children : fallback\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   * @default false\n   */\n  defer: PropTypes.bool,\n\n  /**\n   * The fallback content to display.\n   * @default null\n   */\n  fallback: PropTypes.node\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"anchor\", \"classes\", \"className\", \"width\", \"style\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport styled from '../styles/styled';\nimport capitalize from '../utils/capitalize';\nimport { isHorizontal } from '../Drawer/Drawer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst SwipeAreaRoot = styled('div')(({\n  theme,\n  ownerState\n}) => _extends({\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  zIndex: theme.zIndex.drawer - 1\n}, ownerState.anchor === 'left' && {\n  right: 'auto'\n}, ownerState.anchor === 'right' && {\n  left: 'auto',\n  right: 0\n}, ownerState.anchor === 'top' && {\n  bottom: 'auto',\n  right: 0\n}, ownerState.anchor === 'bottom' && {\n  top: 'auto',\n  bottom: 0,\n  right: 0\n}));\n/**\n * @ignore - internal component.\n */\n\nconst SwipeArea = /*#__PURE__*/React.forwardRef(function SwipeArea(props, ref) {\n  const {\n    anchor,\n    classes = {},\n    className,\n    width,\n    style\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = props;\n  return /*#__PURE__*/_jsx(SwipeAreaRoot, _extends({\n    className: clsx('PrivateSwipeArea-root', classes.root, classes[`anchor${capitalize(anchor)}`], className),\n    ref: ref,\n    style: _extends({\n      [isHorizontal(anchor) ? 'width' : 'height']: width\n    }, style),\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeArea.propTypes = {\n  /**\n   * Side on which to attach the discovery area.\n   */\n  anchor: PropTypes.oneOf(['left', 'top', 'right', 'bottom']).isRequired,\n\n  /**\n   * @ignore\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The width of the left most (or right most) area in `px` where the\n   * drawer can be swiped open from.\n   */\n  width: PropTypes.number.isRequired\n} : void 0;\nexport default SwipeArea;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"BackdropProps\"],\n      _excluded2 = [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { useThemeProps } from '@mui/system';\nimport { NoSsr } from '@mui/base';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport SwipeArea from './SwipeArea'; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst UNCERTAINTY_THRESHOLD = 3; // px\n// This is the part of the drawer displayed on touch start.\n\nconst DRAG_STARTED_SIGNAL = 20; // px\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nlet claimedSwipeInstance = null; // Exported for test purposes.\n\nexport function reset() {\n  claimedSwipeInstance = null;\n}\n\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\n\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  const domTreeShapes = [];\n\n  while (element && element !== rootNode.parentElement) {\n    const style = ownerWindow(rootNode).getComputedStyle(element);\n\n    if ( // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {// noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentElement;\n  }\n\n  return domTreeShapes;\n}\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\n\n\nfunction computeHasNativeHandler({\n  domTreeShapes,\n  start,\n  current,\n  anchor\n}) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps\n  });\n  const theme = useTheme();\n  const transitionDurationDefault = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen\n  };\n\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = iOS,\n    hideBackdrop,\n    hysteresis = 0.52,\n    minFlingVelocity = 450,\n    ModalProps: {\n      BackdropProps\n    } = {},\n    onClose,\n    onOpen,\n    open,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary'\n  } = props,\n        ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded),\n        other = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  const calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback((translate, options = {}) => {\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        easing: undefined,\n        style: undefined,\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(nativeEvent => {\n    if (!touchDetected.current) {\n      return;\n    }\n\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const handleBodyTouchMove = useEventCallback(nativeEvent => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      const hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n\n      claimedSwipeInstance = swipeInstance.current;\n    } // We don't know yet.\n\n\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        } // Shift the starting point.\n\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(nativeEvent => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (!open) {\n      if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {\n        return;\n      }\n\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    setMaybeSwiping(true);\n\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n        changeTransition: false\n      });\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart); // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (claimedSwipeInstance === swipeInstance.current) {\n      claimedSwipeInstance = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, _extends({\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: _extends({\n        BackdropProps: _extends({}, BackdropProps, {\n          ref: backdropRef\n        })\n      }, ModalPropsProp),\n      hideBackdrop: hideBackdrop,\n      PaperProps: _extends({}, PaperProps, {\n        style: _extends({\n          pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n        }, PaperProps.style),\n        ref: paperRef\n      }),\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref\n    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeArea, _extends({\n        anchor: anchor,\n        ref: swipeAreaRef,\n        width: swipeAreaWidth\n      }, SwipeAreaProps))\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;"],"names":["props","children","defer","fallback","React","mountedState","setMountedState","useEnhancedEffect","_jsx","_excluded","SwipeAreaRoot","styled","theme","ownerState","_extends","position","top","left","bottom","zIndex","drawer","anchor","right","ref","classes","className","width","style","other","_objectWithoutPropertiesLoose","clsx","root","capitalize","isHorizontal","_excluded2","claimedSwipeInstance","calculateCurrentX","touches","doc","body","offsetWidth","pageX","calculateCurrentY","containerWindow","innerHeight","clientY","getMaxTranslate","horizontalSwipe","paperInstance","clientWidth","clientHeight","getTranslate","currentTranslate","startLocation","open","maxTranslate","Math","min","max","iOS","navigator","test","userAgent","SwipeableDrawer","inProps","useThemeProps","name","useTheme","transitionDurationDefault","enter","transitions","duration","enteringScreen","exit","leavingScreen","disableBackdropTransition","disableDiscovery","disableSwipeToOpen","hideBackdrop","hysteresis","minFlingVelocity","ModalProps","BackdropProps","onClose","onOpen","PaperProps","SwipeAreaProps","swipeAreaWidth","transitionDuration","variant","ModalPropsProp","maybeSwiping","setMaybeSwiping","swipeInstance","isSwiping","swipeAreaRef","backdropRef","paperRef","touchDetected","calculatedDurationRef","current","setPosition","translate","options","mode","changeTransition","anchorRtl","getAnchor","rtlTranslateMultiplier","indexOf","transform","drawerStyle","webkitTransform","transition","create","getTransitionProps","easing","undefined","timeout","webkitTransition","backdropStyle","opacity","handleBodyTouchEnd","useEventCallback","nativeEvent","horizontal","changedTouches","ownerDocument","currentTarget","ownerWindow","startX","startY","translateRatio","abs","velocity","handleBodyTouchMove","currentX","currentY","contains","target","hasNativeHandler","domTreeShapes","start","axisProperties","x","y","some","shape","goingForward","axis","scrollPosition","round","areNotAtStart","areNotAtEnd","computeHasNativeHandler","element","rootNode","parentElement","getComputedStyle","getPropertyValue","scrollWidth","scrollHeight","push","getDomTreeShapes","dx","dy","definitelySwiping","cancelable","preventDefault","paperHit","lastTranslate","lastTime","performance","now","handleBodyTouchStart","defaultPrevented","defaultMuiPrevented","addEventListener","passive","removeEventListener","_jsxs","Drawer","pointerEvents","NoSsr","SwipeArea"],"sourceRoot":""}